#   j <- round((n/k))
#   #From i to j will always be the testing data
#   #so if k = 4, first blocks will be testing data
#   #in the first iteration, then the next one and so on.
#
#   MSE <- c()
#   #Loop until the number of k folds mentioned
#   for(iter in 1:k)
#   {
#
#       indices.test <- c(i:j)
#       test <- dataframe[indices.test,]
#       train <- dataframe[-indices.test,]
#
#
#       i <- j + 1
#       j <- j + round(n/k)
#
#       #IF j is greater than n or it is the second last iteration
#       # put j as n
#       if((j > n) | (iter == (k-1)))
#       {
#         j <- n
#       }
#      #IF test data gets into a vector then convert it
#     #back into a dataframe
#     if(class(test) == "numeric" | class(test) == "character" | class(test) == "integer")
#     {
#       test <- as.data.frame(rbind(test))
#
#     }
#
#     #Get the predicted values from the functionname i.e. the model provided
#     predicted <- functionname(train,test)
#
#     #Fetch the observed values from the test data set.
#     observed <- test[,ncol(test)]
#
#    #Calculate the MSE
#    diff <- predicted - observed
#    diff <- diff ^ 2
#    MSE[iter] <- mean(diff)
#   }
#
#Return the MSE vector
return(MSE)
}
df1 <- data.frame(x = c(1:10), y = c(11:20))
do_cv(df1,"y",4,get_pred_default)
df5[samples != 1, ]
df5[samples == 1, ]
nrow(df5[samples == 1, ])
nrow(df5[samples != 1, ])
317 + 189
do_cv <- function(dataframe, output, k, functionname)
{
#Get the number of rows in the data frame
n <- nrow(dataframe)
#Sample numbers as per the k value and repeat for n rows
samples <- sample(1:k, n, replace = TRUE)
#Create a dummy variable in the dataframe and store these numbers
dataframe <- cbind(dataframe,samples)
#Randomize the Data
dataframe <- dataframe[sample(nrow(dataframe)),]
#Put the output variable in the last column
df2 <- dataframe[,output]
colns <- colnames(dataframe)
dataframe <- dataframe[,-which(names(dataframe) %in% output)]
dataframe <- cbind(dataframe,df2)
colns <- colns[-which(colns %in% output)]
colnames(dataframe) <- c(colns,output)
MSE <- c()
#Put all the variables of one sample value
#in the testing data set
for(iter in 1:k)
{
test <- dataframe[samples == iter, ]
print(test)
train <- dataframe[samples != iter, ]
print(train)
#Get the predicted values from the functionname i.e. the model provided
predicted <- functionname(train,test)
#Fetch the observed values from the test data set.
observed <- test[,ncol(test)]
#Calculate the MSE
diff <- predicted - observed
diff <- diff ^ 2
MSE[iter] <- mean(diff)
}
#Keep two indices to split the data into training and testing
#   i <- 1
#   j <- round((n/k))
#   #From i to j will always be the testing data
#   #so if k = 4, first blocks will be testing data
#   #in the first iteration, then the next one and so on.
#
#   MSE <- c()
#   #Loop until the number of k folds mentioned
#   for(iter in 1:k)
#   {
#
#       indices.test <- c(i:j)
#       test <- dataframe[indices.test,]
#       train <- dataframe[-indices.test,]
#
#
#       i <- j + 1
#       j <- j + round(n/k)
#
#       #IF j is greater than n or it is the second last iteration
#       # put j as n
#       if((j > n) | (iter == (k-1)))
#       {
#         j <- n
#       }
#      #IF test data gets into a vector then convert it
#     #back into a dataframe
#     if(class(test) == "numeric" | class(test) == "character" | class(test) == "integer")
#     {
#       test <- as.data.frame(rbind(test))
#
#     }
#
#     #Get the predicted values from the functionname i.e. the model provided
#     predicted <- functionname(train,test)
#
#     #Fetch the observed values from the test data set.
#     observed <- test[,ncol(test)]
#
#    #Calculate the MSE
#    diff <- predicted - observed
#    diff <- diff ^ 2
#    MSE[iter] <- mean(diff)
#   }
#
#Return the MSE vector
return(MSE)
}
log_crime_house_value <- house_no_missing.csv[,colnames(house_no_missing.csv) %in% c("Crime_Rate","house_value")]
log_crime_house_value <- transform(log_crime_house_value, Crime_Rate = log(Crime_Rate))
mse_default = do_cv(log_crime_house_value,"house_value",nrow(log_crime_house_value),get_pred_default)
do_cv <- function(dataframe, output, k, functionname)
{
#Get the number of rows in the data frame
n <- nrow(dataframe)
#Sample numbers as per the k value and repeat for n rows
samples <- sample(1:k, n, replace = TRUE)
#Create a dummy variable in the dataframe and store these numbers
dataframe <- cbind(dataframe,samples)
#Randomize the Data
dataframe <- dataframe[sample(nrow(dataframe)),]
#Put the output variable in the last column
df2 <- dataframe[,output]
colns <- colnames(dataframe)
dataframe <- dataframe[,-which(names(dataframe) %in% output)]
dataframe <- cbind(dataframe,df2)
colns <- colns[-which(colns %in% output)]
colnames(dataframe) <- c(colns,output)
MSE <- c()
#Put all the variables of one sample value
#in the testing data set
for(iter in 1:k)
{
test <- dataframe[samples == iter, ]
train <- dataframe[samples != iter, ]
#Get the predicted values from the functionname i.e. the model provided
predicted <- functionname(train,test)
#Fetch the observed values from the test data set.
observed <- test[,ncol(test)]
#Calculate the MSE
diff <- predicted - observed
diff <- diff ^ 2
MSE[iter] <- mean(diff)
}
#Keep two indices to split the data into training and testing
#   i <- 1
#   j <- round((n/k))
#   #From i to j will always be the testing data
#   #so if k = 4, first blocks will be testing data
#   #in the first iteration, then the next one and so on.
#
#   MSE <- c()
#   #Loop until the number of k folds mentioned
#   for(iter in 1:k)
#   {
#
#       indices.test <- c(i:j)
#       test <- dataframe[indices.test,]
#       train <- dataframe[-indices.test,]
#
#
#       i <- j + 1
#       j <- j + round(n/k)
#
#       #IF j is greater than n or it is the second last iteration
#       # put j as n
#       if((j > n) | (iter == (k-1)))
#       {
#         j <- n
#       }
#      #IF test data gets into a vector then convert it
#     #back into a dataframe
#     if(class(test) == "numeric" | class(test) == "character" | class(test) == "integer")
#     {
#       test <- as.data.frame(rbind(test))
#
#     }
#
#     #Get the predicted values from the functionname i.e. the model provided
#     predicted <- functionname(train,test)
#
#     #Fetch the observed values from the test data set.
#     observed <- test[,ncol(test)]
#
#    #Calculate the MSE
#    diff <- predicted - observed
#    diff <- diff ^ 2
#    MSE[iter] <- mean(diff)
#   }
#
#Return the MSE vector
return(MSE)
}
log_crime_house_value <- house_no_missing.csv[,colnames(house_no_missing.csv) %in% c("Crime_Rate","house_value")]
log_crime_house_value <- transform(log_crime_house_value, Crime_Rate = log(Crime_Rate))
mse_default = do_cv(log_crime_house_value,"house_value",nrow(log_crime_house_value),get_pred_default)
mse_lr = do_cv(log_crime_house_value,"house_value",nrow(log_crime_house_value),get_pred_lr)
mse_dots = do_cv(log_crime_house_value,"house_value",nrow(log_crime_house_value),get_pred_dots)
do_cv <- function(dataframe, output, k, functionname)
{
#Get the number of rows in the data frame
n <- nrow(dataframe)
#Sample numbers as per the k value and repeat for n rows
samples <- sample(1:k, n, replace = TRUE)
#Create a dummy variable in the dataframe and store these numbers
dataframe <- cbind(dataframe,samples)
#Randomize the Data
dataframe <- dataframe[sample(nrow(dataframe)),]
#Put the output variable in the last column
df2 <- dataframe[,output]
colns <- colnames(dataframe)
dataframe <- dataframe[,-which(names(dataframe) %in% output)]
dataframe <- cbind(dataframe,df2)
colns <- colns[-which(colns %in% output)]
colnames(dataframe) <- c(colns,output)
MSE <- c()
#Put all the variables of one sample value
#in the testing data set
for(iter in 1:k)
{
test <- dataframe[samples == iter, ]
str(test)
train <- dataframe[samples != iter, ]
str(test)
#Get the predicted values from the functionname i.e. the model provided
predicted <- functionname(train,test)
#Fetch the observed values from the test data set.
observed <- test[,ncol(test)]
#Calculate the MSE
diff <- predicted - observed
diff <- diff ^ 2
MSE[iter] <- mean(diff)
}
#Keep two indices to split the data into training and testing
#   i <- 1
#   j <- round((n/k))
#   #From i to j will always be the testing data
#   #so if k = 4, first blocks will be testing data
#   #in the first iteration, then the next one and so on.
#
#   MSE <- c()
#   #Loop until the number of k folds mentioned
#   for(iter in 1:k)
#   {
#
#       indices.test <- c(i:j)
#       test <- dataframe[indices.test,]
#       train <- dataframe[-indices.test,]
#
#
#       i <- j + 1
#       j <- j + round(n/k)
#
#       #IF j is greater than n or it is the second last iteration
#       # put j as n
#       if((j > n) | (iter == (k-1)))
#       {
#         j <- n
#       }
#      #IF test data gets into a vector then convert it
#     #back into a dataframe
#     if(class(test) == "numeric" | class(test) == "character" | class(test) == "integer")
#     {
#       test <- as.data.frame(rbind(test))
#
#     }
#
#     #Get the predicted values from the functionname i.e. the model provided
#     predicted <- functionname(train,test)
#
#     #Fetch the observed values from the test data set.
#     observed <- test[,ncol(test)]
#
#    #Calculate the MSE
#    diff <- predicted - observed
#    diff <- diff ^ 2
#    MSE[iter] <- mean(diff)
#   }
#
#Return the MSE vector
return(MSE)
}
do_cv(df1,"y",4,get_pred_default)
do_cv(df1,"y",4,get_pred_dots)
mse_dots = do_cv(log_crime_house_value,"house_value",nrow(log_crime_house_value),get_pred_dots)
rm(list=ls())
source('D:/Study/Mini2/Data Mining/HW1/HW1_sgagpall.r')
rm(list = ls())
df5
df4
df1
x <- 1
class(x)
class(x) <- "integer"
x
class(x)
class(x) <- "integersd"
class(x)
source('D:/Study/Mini2/Data Mining/HW1/HW1_sgagpall.r')
do_cv <- function(dataframe, output, k, functionname)
{
#Get the number of rows in the data frame
n <- nrow(dataframe)
#Sample numbers as per the k value and repeat for n rows
samples <- sample(1:k, n, replace = TRUE)
#Create a dummy variable in the dataframe and store these numbers
dataframe <- cbind(dataframe,samples)
#Randomize the Data
dataframe <- dataframe[sample(nrow(dataframe)),]
#Put the output variable in the last column
df2 <- dataframe[,output]
colns <- colnames(dataframe)
dataframe <- dataframe[,-which(names(dataframe) %in% output)]
dataframe <- cbind(dataframe,df2)
colns <- colns[-which(colns %in% output)]
colnames(dataframe) <- c(colns,output)
MSE <- c()
#Put all the variables of one sample value
#in the testing data set
for(iter in 1:k)
{
test <- dataframe[samples == iter, ]
str(test)
train <- dataframe[samples != iter, ]
str(test)
#Get the predicted values from the functionname i.e. the model provided
class(test$samples) <- "numeric"
class(train$samples) <- "numeric"
predicted <- functionname(train,test)
#Fetch the observed values from the test data set.
observed <- test[,ncol(test)]
#Calculate the MSE
diff <- predicted - observed
diff <- diff ^ 2
MSE[iter] <- mean(diff)
}
#Keep two indices to split the data into training and testing
#   i <- 1
#   j <- round((n/k))
#   #From i to j will always be the testing data
#   #so if k = 4, first blocks will be testing data
#   #in the first iteration, then the next one and so on.
#
#   MSE <- c()
#   #Loop until the number of k folds mentioned
#   for(iter in 1:k)
#   {
#
#       indices.test <- c(i:j)
#       test <- dataframe[indices.test,]
#       train <- dataframe[-indices.test,]
#
#
#       i <- j + 1
#       j <- j + round(n/k)
#
#       #IF j is greater than n or it is the second last iteration
#       # put j as n
#       if((j > n) | (iter == (k-1)))
#       {
#         j <- n
#       }
#      #IF test data gets into a vector then convert it
#     #back into a dataframe
#     if(class(test) == "numeric" | class(test) == "character" | class(test) == "integer")
#     {
#       test <- as.data.frame(rbind(test))
#
#     }
#
#     #Get the predicted values from the functionname i.e. the model provided
#     predicted <- functionname(train,test)
#
#     #Fetch the observed values from the test data set.
#     observed <- test[,ncol(test)]
#
#    #Calculate the MSE
#    diff <- predicted - observed
#    diff <- diff ^ 2
#    MSE[iter] <- mean(diff)
#   }
#
#Return the MSE vector
return(MSE)
}
log_crime_house_value <- house_no_missing.csv[,colnames(house_no_missing.csv) %in% c("Crime_Rate","house_value")]
log_crime_house_value <- transform(log_crime_house_value, Crime_Rate = log(Crime_Rate))
mse_default = do_cv(log_crime_house_value,"house_value",nrow(log_crime_house_value),get_pred_default)
mse_lr = do_cv(log_crime_house_value,"house_value",nrow(log_crime_house_value),get_pred_lr)
do_cv <- function(dataframe, output, k, functionname)
{
#Get the number of rows in the data frame
n <- nrow(dataframe)
#Sample numbers as per the k value and repeat for n rows
samples <- sample(1:k, n, replace = TRUE)
#Create a dummy variable in the dataframe and store these numbers
dataframe <- cbind(dataframe,samples)
#Randomize the Data
dataframe <- dataframe[sample(nrow(dataframe)),]
#Put the output variable in the last column
df2 <- dataframe[,output]
colns <- colnames(dataframe)
dataframe <- dataframe[,-which(names(dataframe) %in% output)]
dataframe <- cbind(dataframe,df2)
colns <- colns[-which(colns %in% output)]
colnames(dataframe) <- c(colns,output)
MSE <- c()
#Put all the variables of one sample value
#in the testing data set
for(iter in 1:k)
{
test <- dataframe[samples == iter, ]
#str(test)
train <- dataframe[samples != iter, ]
#str(test)
#Get the predicted values from the functionname i.e. the model provided
class(test$samples) <- "numeric"
class(train$samples) <- "numeric"
predicted <- functionname(train,test)
#Fetch the observed values from the test data set.
observed <- test[,ncol(test)]
#Calculate the MSE
diff <- predicted - observed
diff <- diff ^ 2
MSE[iter] <- mean(diff)
}
#Keep two indices to split the data into training and testing
#   i <- 1
#   j <- round((n/k))
#   #From i to j will always be the testing data
#   #so if k = 4, first blocks will be testing data
#   #in the first iteration, then the next one and so on.
#
#   MSE <- c()
#   #Loop until the number of k folds mentioned
#   for(iter in 1:k)
#   {
#
#       indices.test <- c(i:j)
#       test <- dataframe[indices.test,]
#       train <- dataframe[-indices.test,]
#
#
#       i <- j + 1
#       j <- j + round(n/k)
#
#       #IF j is greater than n or it is the second last iteration
#       # put j as n
#       if((j > n) | (iter == (k-1)))
#       {
#         j <- n
#       }
#      #IF test data gets into a vector then convert it
#     #back into a dataframe
#     if(class(test) == "numeric" | class(test) == "character" | class(test) == "integer")
#     {
#       test <- as.data.frame(rbind(test))
#
#     }
#
#     #Get the predicted values from the functionname i.e. the model provided
#     predicted <- functionname(train,test)
#
#     #Fetch the observed values from the test data set.
#     observed <- test[,ncol(test)]
#
#    #Calculate the MSE
#    diff <- predicted - observed
#    diff <- diff ^ 2
#    MSE[iter] <- mean(diff)
#   }
#
#Return the MSE vector
return(MSE)
}
mse_lr = do_cv(log_crime_house_value,"house_value",nrow(log_crime_house_value),get_pred_lr)
mse_default = do_cv(log_crime_house_value,"house_value",nrow(log_crime_house_value),get_pred_default)
mse_dots = do_cv(log_crime_house_value,"house_value",nrow(log_crime_house_value),get_pred_dots)
rm(list =ls())
source('D:/Study/Mini2/Data Mining/HW1/HW1_sgagpall.r')
source('D:/Study/Mini2/Data Mining/HW2/HW2_sgagpall.R')
setwd("D:/Study/Mini2/Data Mining/Project/Team H")
